import React, { useState, useEffect } from 'react';

const App = () => {
  const [profile, setProfile] = useState({
    username: '',
    skillLevel: '',
    playStyle: '',
    communicationPreference: ''
  });
  const [friends, setFriends] = useState([]);

  useEffect(() => {
    // Fetch user's friends from the API
    fetchFriends();
  }, []);

  const fetchFriends = async () => {
    // Fetch friends data using Epic online services API
    try {
      const response = await fetch('https://eos.com/api/friends');
      const data = await response.json();
      setFriends(data);
    } catch (error) {
      console.error('Error fetching friends:', error);
    }
  };

  const handleProfileChange = (e) => {
    const { name, value } = e.target;
    setProfile((prevProfile) => ({
      ...prevProfile,
      [name]: value
    }));
  };

  const saveProfile = async () => {
    try {
      const response = await fetch('https://eos.com/api/profile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(profile)
      });
      const data = await response.json();
      console.log('Profile saved successfully:', data);
    } catch (error) {
      console.error('Error saving profile:', error);
    }
  };

  const addFriend = async (friendId) => {
    try {
      const response = await fetch('https://eos.com/api/friends', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ friendId })
      });
      const data = await response.json();
      console.log('Friend added successfully:', data);
      // Refresh friends list
      fetchFriends();
    } catch (error) {
      console.error('Error adding friend:', error);
    }
  };

  return (
    <div>
      <h1>Profile</h1>
      <label>
        Username:
        <input
          type="text"
          name="username"
          value={profile.username}
          onChange={handleProfileChange}
        />
      </label>
      <label>
        Skill Level:
        <select
          name="skillLevel"
          value={profile.skillLevel}
          onChange={handleProfileChange}
        >
          <option value="">Select skill level</option>
          <option value="Beginner">Beginner</option>
          <option value="Intermediate">Intermediate</option>
          <option value="Advanced">Advanced</option>
        </select>
      </label>
      <label>
        Play Style:
        <select
          name="playStyle"
          value={profile.playStyle}
          onChange={handleProfileChange}
        >
          <option value="">Select play style</option>
          <option value="Aggressive">Aggressive</option>
          <option value="Collaborative">Collaborative</option>
          <option value="Competitive">Competitive</option>
        </select>
      </label>
      <label>
        Communication Preference:
        <select
          name="communicationPreference"
          value={profile.communicationPreference}
          onChange={handleProfileChange}
        >
          <option value="">Select communication preference</option>
          <option value="Video Chat">Video Chat</option>
          <option value="Voice Chat">Voice Chat</option>
          <option value="Text Chat">Text Chat</option>
        </select>
      </label>
      <button onClick={saveProfile}>Save Profile</button>

      <h1>Friends</h1>
      <ul>
        {friends.map((friend) => (
          <li key={friend.id}>
            {friend.username} ({friend.skillLevel}, {friend.playStyle})
            <button onClick={() => addFriend(friend.id)}>Add Friend</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;
